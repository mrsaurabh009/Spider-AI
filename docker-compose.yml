version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: spider-ai-postgres
    environment:
      POSTGRES_DB: spider_ai
      POSTGRES_USER: spider_user
      POSTGRES_PASSWORD: spider_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./tools/scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spider-ai-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: spider-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - spider-ai-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: spider-ai-backend
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://spider_user:spider_password@postgres:5432/spider_ai
      - REDIS_URL=redis://redis:6379
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - FRONTEND_URL=http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - spider-ai-network
    restart: unless-stopped
    command: npm run dev

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    container_name: spider-ai-frontend
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:3000
      - REACT_APP_WS_URL=ws://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - spider-ai-network
    restart: unless-stopped
    command: npm run dev

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: spider-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./tools/configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./tools/configs/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - spider-ai-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: spider-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./tools/configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - spider-ai-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: spider-ai-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./tools/configs/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - spider-ai-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  spider-ai-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
