import { logger } from '@/utils/logger';
import { CodeGenerationRequest, GeneratedCode, ProjectFramework } from '@/types/ai';

export class MockAIService {
  /**
   * Generate mock application for testing
   */
  async generateApplication(request: CodeGenerationRequest): Promise<GeneratedCode> {
    try {
      logger.info('üé≠ Using Mock AI Service for testing', {
        framework: request.framework,
        type: request.type,
        promptLength: request.prompt.length
      });

      // Simulate processing time
      await new Promise(resolve => setTimeout(resolve, 2000));

      const mockCode = this.generateMockCode(request.framework, request.prompt);

      const generatedCode: GeneratedCode = {
        framework: request.framework,
        frontend: mockCode.frontend,
        backend: request.includeBackend ? mockCode.backend : undefined,
        database: request.includeDatabase ? mockCode.database : undefined,
        packageJson: mockCode.packageJson,
        files: mockCode.files,
        usage: {
          promptTokens: 100,
          completionTokens: 800,
          totalTokens: 900
        },
        model: 'mock-ai-service',
        timestamp: new Date().toISOString()
      };

      logger.info('‚úÖ Mock application generation completed', {
        tokensUsed: generatedCode.usage.totalTokens,
        hasBackend: !!generatedCode.backend,
        hasDatabase: !!generatedCode.database
      });

      return generatedCode;

    } catch (error) {
      logger.error('‚ùå Mock application generation failed', error);
      throw new Error(`Mock AI generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Generate mock code based on framework
   */
  private generateMockCode(framework: ProjectFramework, prompt: string) {
    const appName = this.extractAppName(prompt);
    
    switch (framework) {
      case 'REACT':
        return {
          frontend: this.generateReactCode(appName, prompt),
          backend: this.generateExpressCode(appName),
          database: this.generateDatabaseSchema(appName),
          packageJson: this.generateReactPackageJson(appName),
          files: this.generateReactFiles(appName)
        };
      
      case 'NEXTJS':
        return {
          frontend: this.generateNextJSCode(appName, prompt),
          backend: this.generateNextJSApiCode(appName),
          database: this.generateDatabaseSchema(appName),
          packageJson: this.generateNextJSPackageJson(appName),
          files: this.generateNextJSFiles(appName)
        };

      default:
        return {
          frontend: this.generateReactCode(appName, prompt),
          backend: this.generateExpressCode(appName),
          database: this.generateDatabaseSchema(appName),
          packageJson: this.generateReactPackageJson(appName),
          files: this.generateReactFiles(appName)
        };
    }
  }

  private extractAppName(prompt: string): string {
    const words = prompt.toLowerCase().split(' ');
    if (words.includes('todo') || words.includes('task')) return 'TaskApp';
    if (words.includes('blog')) return 'BlogApp';
    if (words.includes('shop') || words.includes('ecommerce')) return 'ShopApp';
    if (words.includes('chat')) return 'ChatApp';
    return 'GeneratedApp';
  }

  private generateReactCode(appName: string, prompt: string): string {
    return `import React, { useState, useEffect } from 'react';
import './App.css';

interface ${appName}Props {
  title?: string;
}

const ${appName}: React.FC<${appName}Props> = ({ title = '${appName}' }) => {
  const [data, setData] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Simulate data loading
    setTimeout(() => {
      setData([
        { id: 1, name: 'Item 1', description: 'First item' },
        { id: 2, name: 'Item 2', description: 'Second item' },
      ]);
      setLoading(false);
    }, 1000);
  }, []);

  const handleItemClick = (item: any) => {
    console.log('Clicked item:', item);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-lg">Loading...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <header className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">{title}</h1>
          <p className="text-gray-600">
            Generated by Spider AI - Based on: "${prompt.slice(0, 50)}..."
          </p>
        </header>

        <main>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {data.map((item) => (
              <div
                key={item.id}
                className="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow cursor-pointer"
                onClick={() => handleItemClick(item)}
              >
                <h3 className="text-xl font-semibold mb-2">{item.name}</h3>
                <p className="text-gray-600">{item.description}</p>
              </div>
            ))}
          </div>
        </main>

        <footer className="text-center mt-12 text-gray-500">
          <p>Powered by Spider AI üï∑Ô∏è</p>
        </footer>
      </div>
    </div>
  );
};

export default ${appName};`;
  }

  private generateExpressCode(appName: string): string {
    return `import express from 'express';
import cors from 'cors';
import helmet from 'helmet';

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Routes
app.get('/api/health', (req, res) => {
  res.json({
    success: true,
    message: '${appName} API is running',
    timestamp: new Date().toISOString()
  });
});

app.get('/api/items', (req, res) => {
  const items = [
    { id: 1, name: 'Item 1', description: 'First item' },
    { id: 2, name: 'Item 2', description: 'Second item' },
    { id: 3, name: 'Item 3', description: 'Third item' }
  ];
  
  res.json({
    success: true,
    data: items
  });
});

app.post('/api/items', (req, res) => {
  const { name, description } = req.body;
  
  if (!name) {
    return res.status(400).json({
      success: false,
      error: 'Name is required'
    });
  }
  
  const newItem = {
    id: Date.now(),
    name,
    description: description || ''
  };
  
  res.status(201).json({
    success: true,
    data: newItem
  });
});

// Error handling
app.use((err: any, req: any, res: any, next: any) => {
  console.error(err.stack);
  res.status(500).json({
    success: false,
    error: 'Something went wrong!'
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    error: 'Route not found'
  });
});

app.listen(PORT, () => {
  console.log(\`üöÄ ${appName} server running on port \${PORT}\`);
});

export default app;`;
  }

  private generateDatabaseSchema(appName: string): string {
    return `-- ${appName} Database Schema
CREATE TABLE IF NOT EXISTS users (
  id SERIAL PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  name VARCHAR(255) NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS items (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_items_user_id ON items(user_id);
CREATE INDEX idx_items_created_at ON items(created_at);`;
  }

  private generateReactPackageJson(appName: string): any {
    return {
      name: appName.toLowerCase(),
      version: '1.0.0',
      private: true,
      dependencies: {
        'react': '^18.2.0',
        'react-dom': '^18.2.0',
        'react-scripts': '^5.0.1',
        '@types/react': '^18.2.0',
        '@types/react-dom': '^18.2.0',
        'typescript': '^5.0.0'
      },
      scripts: {
        start: 'react-scripts start',
        build: 'react-scripts build',
        test: 'react-scripts test',
        eject: 'react-scripts eject'
      },
      browserslist: {
        production: ['>0.2%', 'not dead', 'not op_mini all'],
        development: ['last 1 chrome version', 'last 1 firefox version', 'last 1 safari version']
      }
    };
  }

  private generateReactFiles(appName: string): Array<{ path: string; content: string }> {
    return [
      {
        path: 'src/index.tsx',
        content: `import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import ${appName} from './App';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <React.StrictMode>
    <${appName} />
  </React.StrictMode>
);`
      },
      {
        path: 'src/App.css',
        content: `@tailwind base;
@tailwind components;
@tailwind utilities;

.App {
  text-align: center;
}

.loading {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}`
      },
      {
        path: 'public/index.html',
        content: `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>${appName}</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>`
      }
    ];
  }

  private generateNextJSCode(appName: string, prompt: string): string {
    return `import { useState, useEffect } from 'react';
import Head from 'next/head';

export default function Home() {
  const [data, setData] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      setData([
        { id: 1, title: 'Welcome to ${appName}', content: 'This is your generated Next.js app' },
        { id: 2, title: 'Based on your prompt', content: '${prompt.slice(0, 100)}...' }
      ]);
      setLoading(false);
    } catch (error) {
      console.error('Error fetching data:', error);
      setLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>${appName}</title>
        <meta name="description" content="Generated by Spider AI" />
      </Head>

      <main className="min-h-screen bg-gray-50 py-12">
        <div className="max-w-4xl mx-auto px-4">
          <h1 className="text-4xl font-bold text-center mb-8">
            ${appName}
          </h1>
          
          {loading ? (
            <div className="text-center">Loading...</div>
          ) : (
            <div className="space-y-6">
              {data.map((item) => (
                <div key={item.id} className="bg-white p-6 rounded-lg shadow">
                  <h2 className="text-xl font-semibold mb-2">{item.title}</h2>
                  <p className="text-gray-600">{item.content}</p>
                </div>
              ))}
            </div>
          )}
        </div>
      </main>
    </>
  );
}`;
  }

  private generateNextJSApiCode(appName: string): string {
    return `// pages/api/items.ts
import type { NextApiRequest, NextApiResponse } from 'next';

const items = [
  { id: 1, name: 'Item 1', description: 'First item' },
  { id: 2, name: 'Item 2', description: 'Second item' },
];

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    res.status(200).json({ success: true, data: items });
  } else if (req.method === 'POST') {
    const { name, description } = req.body;
    const newItem = { id: Date.now(), name, description };
    items.push(newItem);
    res.status(201).json({ success: true, data: newItem });
  } else {
    res.status(405).json({ success: false, error: 'Method not allowed' });
  }
}`;
  }

  private generateNextJSPackageJson(appName: string): any {
    return {
      name: appName.toLowerCase(),
      version: '1.0.0',
      private: true,
      scripts: {
        dev: 'next dev',
        build: 'next build',
        start: 'next start',
        lint: 'next lint'
      },
      dependencies: {
        'next': '^13.4.0',
        'react': '^18.2.0',
        'react-dom': '^18.2.0',
        '@types/node': '^20.0.0',
        '@types/react': '^18.2.0',
        '@types/react-dom': '^18.2.0',
        'typescript': '^5.0.0'
      }
    };
  }

  private generateNextJSFiles(appName: string): Array<{ path: string; content: string }> {
    return [
      {
        path: 'next.config.js',
        content: `/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
}

module.exports = nextConfig`
      },
      {
        path: 'tsconfig.json',
        content: `{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [{ "name": "next" }],
    "paths": { "@/*": ["./src/*"] }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}`
      }
    ];
  }
}

// Export singleton instance
export const mockAiService = new MockAIService();
