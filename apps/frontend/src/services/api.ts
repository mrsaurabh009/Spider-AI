import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000/api';

// Create axios instance
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 30000, // 30 seconds
});

// Request interceptor to add auth token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('auth_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor for error handling
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // Handle unauthorized access
      localStorage.removeItem('auth_token');
      window.location.href = '/auth/login';
    }
    return Promise.reject(error);
  }
);

export default api;

// API endpoints
export const authAPI = {
  login: (credentials: { email: string; password: string }) =>
    api.post('/auth/login', credentials),
  
  register: (userData: { email: string; password: string; username: string }) =>
    api.post('/auth/register', userData),
  
  logout: () =>
    api.post('/auth/logout'),
  
  me: () =>
    api.get('/auth/me'),
  
  forgotPassword: (email: string) =>
    api.post('/auth/forgot-password', { email }),
  
  resetPassword: (token: string, password: string) =>
    api.post('/auth/reset-password', { token, password }),
};

export const projectsAPI = {
  list: (params?: { page?: number; limit?: number; search?: string }) =>
    api.get('/projects', { params }),
  
  get: (id: string) =>
    api.get(`/projects/${id}`),
  
  create: (data: any) =>
    api.post('/projects', data),
  
  update: (id: string, data: any) =>
    api.put(`/projects/${id}`, data),
  
  delete: (id: string) =>
    api.delete(`/projects/${id}`),
};

// Mock implementation for development
const createMockResponse = (data: any) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        data: {
          message: 'This is a mock response. The actual backend is not connected yet.',
          frontend: `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mock Generated App</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 2rem; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { text-align: center; margin-bottom: 2rem; }
        .feature { padding: 1rem; margin: 1rem 0; background: #f8f9fa; border-radius: 4px; }
        button { background: #007bff; color: white; border: none; padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer; }
        button:hover { background: #0056b3; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸŽ‰ Generated by Spider AI</h1>
            <p>Your AI-powered web application is ready!</p>
        </div>
        <div class="feature">
            <h3>âœ¨ Modern Design</h3>
            <p>Clean, responsive layout with modern styling</p>
        </div>
        <div class="feature">
            <h3>âš¡ Fast Performance</h3>
            <p>Optimized for speed and user experience</p>
        </div>
        <div class="feature">
            <h3>ðŸ“± Mobile Ready</h3>
            <p>Responsive design that works on all devices</p>
        </div>
        <div class="text-center">
            <button onclick="alert('Hello from your generated app!')">Click Me!</button>
        </div>
    </div>
</body>
</html>`,
          usage: { totalTokens: 150, promptTokens: 50, completionTokens: 100 },
          model: 'claude-3-sonnet-20240229',
          files: [
            { name: 'index.html', content: 'HTML content here' },
            { name: 'styles.css', content: 'CSS content here' },
            { name: 'script.js', content: 'JS content here' }
          ]
        }
      });
    }, 2000); // 2 second delay to simulate API call
  });
};

export const chatAPI = {
  generateCode: (data: any) => {
    console.log('Generating code with data:', data);
    return createMockResponse(data);
  },
  
  generateComponent: (data: any) => {
    console.log('Generating component with data:', data);
    return createMockResponse(data);
  },
  
  explainCode: (data: any) => {
    console.log('Explaining code with data:', data);
    return createMockResponse(data);
  },
  
  refineCode: (data: any) => {
    console.log('Refining code with data:', data);
    return createMockResponse(data);
  },
};
